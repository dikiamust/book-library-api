import { BadRequestException, Injectable } from '@nestjs/common';
import { PrismaService } from 'src/config/database/prisma.service';
import { Prisma } from '@prisma/client';
import { PaginationResponse } from 'src/common/pagination';
import { QueryMemberList } from './dto';

@Injectable()
export class MemberService {
  constructor(private readonly prismaService: PrismaService) {}

  async list(query: QueryMemberList) {
    try {
      const skip = query?.limit
        ? Number(query.limit) * Number(query.page - 1)
        : undefined;
      const take = query?.limit ? Number(query.limit) : undefined;

      const where: Prisma.MemberWhereInput = {};

      const member = await this.prismaService.member.findMany({
        include: {
          borrowings: {
            include: {
              book: true,
            },
          },
        },
        orderBy: {
          createdAt: 'desc',
        },
        where,
        skip,
        take,
      });

      const members = await this.prismaService.$queryRaw`
        SELECT
          m.id AS "memberId",
          m.code AS "memberCode",
          m.name AS "memberName",
          m.email AS "memberEmail",
          b.borrow_date AS "borrowDate",
          b.return_date AS "returnDate",
          b2.code AS "bookCode",
          b2.title AS "bookTitle"
        FROM members m
        LEFT JOIN borrowings b
          ON b.member_id = m.id AND b.return_date IS NULL
        LEFT JOIN books b2
          ON b.book_id = b2.id
        GROUP BY m.id, b.borrow_date, b.return_date, b2.code, b2.title
        ORDER BY m.created_at DESC
        LIMIT ${take}
        OFFSET ${skip}
      `;

      // const members = await this.prismaService.$queryRaw`
      //   SELECT
      //     m.id AS member_id,
      //     m.name AS member_name
      //   FROM members m
      // `;

      console.log('D', members);

      const [{ count }] = await this.prismaService.$queryRaw<
        [{ count: number }]
      >`
        SELECT COUNT(DISTINCT m.id) AS count
        FROM members m
        LEFT JOIN borrowings b  
          ON b.member_id = m.id AND b.return_date IS NULL
        LEFT JOIN books b2 
          ON b.book_id = b2.id
      `;

      console.log('E', count);

      const countMember = await this.prismaService.member.count({
        where,
      });

      return PaginationResponse(member, countMember, query?.page, query?.limit);
    } catch (error) {
      console.log('F', error);
      throw new BadRequestException(error?.message || 'Something went wrong');
    }
  }
}
